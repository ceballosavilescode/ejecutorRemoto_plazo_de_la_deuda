import sqlalchemy
import pandas as pd
import glob
import sqlite3
from datetime import datetime
from datetime import date
import xlrd
import csv
import os
import numpy as np
import datetime
import time
import sys

class PlazoDeLaDeuda(object):

	def escribir_lento(texto, delay=0.1):
		"""Imprime texto como si estuviera siendo tecleado"""
		for char in texto:
			sys.stdout.write(char)
			sys.stdout.flush()
			time.sleep(delay)
		sys.stdout.write("\n")

	def normalizeDate(self, dateString):
		return dateString.replace(['(\d{2})\/(\d{2})\/(\d{4})'], ['\g<1>-\g<2>-\g<3>'], regex=True)

	def normalizeFactura(self, string):
		string	= [w.replace('.0', '' ) for w in string ]
		return string

	def normalizeRut(self, string):
		string	= [w.replace(',00', '' ) for w in string ]
		string	= [w.replace(' ', '' ) for w in string ]
		string	= [w.replace('$', '' ) for w in string ]
		string	= [w.replace('.', '' ) for w in string ]
		string	= [w.replace('(', '-' ) for w in string ]
		string	= [w.replace(')', '' ) for w in string ]
		return string

	def normalizeNumeric(self, string):
		return pd.to_numeric(string)

	def normalizeFolio(self, string):
		string	= [w.replace('.0', '' ) for w in string ]
		return string


	def __init__(self):

		pwd = input("üîë Ingrese la contrase√±a: ")
		if pwd != "1":
			print("‚ùå Acceso denegado")
			time.sleep(2)  # peque√±a pausa para mostrar el mensaje
			os._exit(1)    # cierra la consola de inmediato

			print("‚úÖ Contrase√±a correcta. Acceso permitido.\n")

			#======--
			usuario_pc = os.getlogin()
			time.sleep(3)

			escribir_lento("Wake up " + usuario_pc, delay=0.08)
			time.sleep(5)
			os.system("cls" if os.name == "nt" else "clear")

			escribir_lento("The Matrix has you...", delay=0.08)
			time.sleep(5)
			os.system("cls" if os.name == "nt" else "clear")

			escribir_lento("Follow the white rabbit...", delay=0.08)
			time.sleep(5)
			os.system("cls" if os.name == "nt" else "clear")

			escribir_lento("Knock Knock " + usuario_pc, delay=0.08)
			time.sleep(5)
			os.system("cls" if os.name == "nt" else "clear")
			#======--

		ruta_archivos = os.path.join(os.getcwd(), "plazodeladeuda", "SB_CarteraFinancieraContable*.xls")
		#print(ruta_archivos)
		contable = pd.DataFrame()
		for f in glob.glob(ruta_archivos, recursive=True):
			#print('Procesando  : ', f)
			df = pd.read_excel(f, skiprows=10, header=0)
			contable = pd.concat([contable, df], ignore_index=True)  # ‚úÖ Correct

		# print(contable)

		contable.rename(columns={'N√∫mero documento ':'Factura'}, inplace=True)

		contable['T√≠tulo']	= contable.drop( contable[ contable['T√≠tulo'] == 'Total Flujos Periodo' ].index , inplace=True )
		contable['Rut']		= contable['Principal'].str.split(' ', n = 1, expand = True)[0]
		contable['NombreProveedor'] = contable['Principal'].str.split(' ', n = 1, expand = True)[1]
		contable['Saldo'] 	= contable['Haber'] - contable['Debe']
		contable['Saldo'] 	= pd.to_numeric(contable['Saldo'])
		contable['Saldo'] 	= contable['Saldo'].astype(np.int32)
		contable['Factura'] = contable.Factura.apply(str)

		contable = contable.astype({"Factura": 'str'})
		contable['Factura'] = self.normalizeFactura(contable['Factura'])
		contable['unico'] 	=  contable['Rut'] + contable['Factura']

		del contable['Tipo Movimiento']
		del contable['Fecha']
		#del contable['Folio']
		del contable['T√≠tulo']
		del contable['Saldo Acumulado']
		del contable['Tipo Documento']
		del contable['Haber']
		del contable['Debe']

		metadata = sqlalchemy.MetaData()
		engine = sqlalchemy.create_engine('sqlite:///database.db', echo=False)

		metadata = sqlalchemy.MetaData()

		OrdenDeCompra = sqlalchemy.Table(
			'contable',
			metadata,
			sqlalchemy.Column('Cuenta', sqlalchemy.String),
			sqlalchemy.Column('Contable', sqlalchemy.String),
			sqlalchemy.Column('Principal', sqlalchemy.String),
			sqlalchemy.Column('Saldo', sqlalchemy.Integer),
			sqlalchemy.Column('Fecha', sqlalchemy.String),
			sqlalchemy.Column('Factura', sqlalchemy.String),
			sqlalchemy.Column('Rut', sqlalchemy.String)

			)


		metadata.create_all(engine)
		contable.to_sql('contable', engine, if_exists='replace', index=False)


		cnx = sqlite3.connect('database.db')
		consulta  = " \
			SELECT \
				contable.'unico', \
				Rut, \
				NombreProveedor, \
				Factura, \
				Folio, \
				contable.'Cuenta Contable', \
				contable.'Area Transaccional', \
				sum(Saldo) as current_year \
			FROM \
				contable \
			GROUP BY \
				unico \
			HAVING \
				contable.'Cuenta Contable' LIKE '%' \
				and [current_year]<>0 \
			ORDER BY \
				'Cuenta Contable' asc \
		"
		contable_limpio = pd.read_sql_query(consulta, cnx)
		contable_limpio['Fecha'] = ''
		contable_limpio['Dias'] = ''
		##contable_limpio['Intervalo'] = '"=SI(J2<=30;"1 Hasta 30 d√≠as ";SI(Y(J2>=31;J2<=45);"2 Entre 31 y 45 d√≠as";SI(Y(J2>=46;J2<=60);"3 Entre 46 y 60 d√≠as";SI(Y(J2>=61;J2<=90);"4 Entre 61 y 90 d√≠as";SI(Y(J2>=91;J2<=120);"5 Entre 91 y 120 d√≠as";SI(Y(J2>=120;J2<=150);"6 Entre 121 y 150 d√≠as"; SI((J2>=150);"7 M√°s de 150 d√≠as" )))))))"'
		contable_limpio['Intervalo'] = '"=SI(I2<=30;"1 Hasta 30 d√≠as ";SI(Y(I2>=31;I2<=45);"2 Entre 31 y 45 d√≠as";SI(Y(I2>=46;I2<=60);"3 Entre 46 y 60 d√≠as";SI(Y(I2>=61;I2<=90);"4 Entre 61 y 90 d√≠as";SI(Y(I2>=91;I2<=120);"5 Entre 91 y 120 d√≠as";SI(Y(I2>=120;I2<=150);"6 Entre 121 y 150 d√≠as"; SI((I2>=150);"7 M√°s de 150 d√≠as" )))))))"'

		metadata = sqlalchemy.MetaData()
		engine = sqlalchemy.create_engine('sqlite:///database.db', echo=False)

		metadata = sqlalchemy.MetaData()

		OrdenDeCompra = sqlalchemy.Table(
			'contable_limpio',
			metadata,
			sqlalchemy.Column('Cuenta', sqlalchemy.String),
			sqlalchemy.Column('Contable', sqlalchemy.String),
			sqlalchemy.Column('Principal', sqlalchemy.String),
			sqlalchemy.Column('Saldo', sqlalchemy.Integer),
			sqlalchemy.Column('Fecha', sqlalchemy.String),
			sqlalchemy.Column('Factura', sqlalchemy.String),
			sqlalchemy.Column('Rut', sqlalchemy.String)

			)


		metadata.create_all(engine)
		contable_limpio.to_sql('contable_limpio', engine, if_exists='replace', index=False)


		# =====================================================================================

		ruta_archivos = os.path.join(os.getcwd(), "plazodeladeuda", "reporte*.xls")
		#print(ruta_archivos)
		acepta = pd.DataFrame()
		for f in glob.glob(ruta_archivos, recursive=True):
			#print('Procesando  : ', f)
			df = pd.read_excel(f )
			acepta = pd.concat([acepta, df], ignore_index=True)  # ‚úÖ Correct

		# print(acepta)

		acepta['emisor'] 	= self.normalizeRut(acepta['emisor'])
		acepta['tipo']		= acepta.drop( acepta[acepta['tipo'] == 52 ].index , inplace=True )
		acepta['unico']		= acepta['emisor'] + (acepta['folio'].apply(str))
		acepta['unico']		= self.normalizeFolio(acepta['unico'])
		acepta['emision'] = acepta['emision'].astype(str)



		del acepta['impuestos']
		#del acepta['uri']
		del acepta['estado_intercambio']
		del acepta['informacion_intercambio']
		del acepta['estado_nar']
		del acepta['uri_nar']
		del acepta['mensaje_nar']
		del acepta['uri_arm']
		del acepta['fecha_arm']
		del acepta['fmapago']
		del acepta['estado_acepta']
		del acepta['estado_sii']
		del acepta['referencias']
		del acepta['fecha_nar']
		del acepta['controller']
		del acepta['fecha_vencimiento']
		del acepta['estado_cesion']
		del acepta['url_correo_cesion']
		del acepta['fecha_recepcion_sii']
		del acepta['estado_reclamo']
		del acepta['fecha_reclamo']
		del acepta['mensaje_reclamo']
		del acepta['estado_devengo']
		del acepta['razon_social_emisor']
		del acepta['folio_rc']
		del acepta['fecha_ingreso_rc']
		del acepta['ticket_devengo']
		del acepta['folio_sigfe']
		del acepta['tarea_actual']
		#del acepta['area_transaccional']
		del acepta['fecha_ingreso']	
		del acepta['fecha_aceptacion']
		del acepta['fecha']
		del acepta['tipo']
		del acepta['tipo_documento']
		del acepta['receptor']
		del acepta['publicacion']
		#del acepta['emision']
		del acepta['monto_neto']
		del acepta['monto_exento']
		del acepta['monto_iva']
		# del acepta['monto_total']
		del acepta['fecha_ingreso_oc']
		del acepta['codigo_devengo']


		metadata = sqlalchemy.MetaData()

		OrdenDeCompra = sqlalchemy.Table(
			'acepta',
			metadata,
			sqlalchemy.Column('unico', sqlalchemy.String),


			)
		metadata.create_all(engine)
		acepta.to_sql('acepta', engine, if_exists='replace', index=False)



		cnx = sqlite3.connect('database.db')
		consulta  = " \
		SELECT \
			c.Rut, \
			c.NombreProveedor, \
			c.Factura, \
			c.Folio, \
			c.'Cuenta Contable', \
			c.current_year as Saldo, \
			a.uri as url, \
			a.emision as Fecha, \
			c.'Area Transaccional' \
		FROM \
				(SELECT \
					contable.'unico', \
					Rut, \
					NombreProveedor, \
					Factura, \
					Folio, \
					contable.'Cuenta Contable', \
					contable.'Area Transaccional', \
					sum(Saldo) as current_year \
				FROM \
					contable \
				GROUP BY \
					unico \
				HAVING \
					contable.'Cuenta Contable' LIKE '%' \
					and [current_year]<>0 \
				ORDER BY \
					'Cuenta Contable' asc) c \
				LEFT JOIN(SELECT acepta.* FROM acepta)a ON c.unico	= a.unico \
		"
		listo = pd.read_sql_query(consulta, cnx)
		#listo['Fecha 2'] = ""
		#print(listo['Fecha 2'])
		listo['Dias'] = ''
		#listo['Intervalo'] = '"=SI(J2<=30;"1 Hasta 30 d√≠as ";SI(Y(J2>=31;J2<=45);"2 Entre 31 y 45 d√≠as";SI(Y(J2>=46;J2<=60);"3 Entre 46 y 60 d√≠as";SI(Y(J2>=61;J2<=90);"4 Entre 61 y 90 d√≠as";SI(Y(J2>=91;J2<=120);"5 Entre 91 y 120 d√≠as";SI(Y(J2>=120;J2<=150);"6 Entre 121 y 150 d√≠as"; SI((J2>=150);"7 M√°s de 150 d√≠as" )))))))"'
		listo['Intervalo'] = '"=SI(I2<=30,"1 Hasta 30 d√≠as ",SI(Y(I2>=31,I2<=45),"2 Entre 31 y 45 d√≠as",SI(Y(I2>=46,I2<=60),"3 Entre 46 y 60 d√≠as",SI(Y(I2>=61,I2<=90),"4 Entre 61 y 90 d√≠as",SI(Y(I2>=91,I2<=120),"5 Entre 91 y 120 d√≠as",SI(Y(I2>=120,I2<=150),"6 Entre 121 y 150 d√≠as", SI((I2>=150),"7 M√°s de 150 d√≠as" )))))))"'


		# =====================================================================================
		cnx = sqlite3.connect('database.db')
		consulta  = " \
		SELECT \
			c.unico, \
			c.Rut, \
			c.NombreProveedor, \
			c.Factura, \
			c.Folio, \
			c.'Cuenta Contable', \
			c.'Area Transaccional', \
			c.Saldo, \
			a.emision as Fecha, \
			c.Dias, \
			c.Intervalo, \
			a.uri as url \
		FROM \
			(  \
			SELECT unico, Rut, NombreProveedor, Factura, Folio, contable_limpio.'Area Transaccional', contable_limpio.'Cuenta Contable', contable_limpio.'Area Transaccional', sum(current_year) as Saldo, Dias, Intervalo \
			FROM contable_limpio \
			GROUP BY unico \
			HAVING contable_limpio.'Cuenta Contable' LIKE '%' and [current_year]<>0 \
			ORDER BY 'Cuenta Contable' asc)c \
			LEFT JOIN(SELECT DISTINCT(acepta.unico), acepta.* FROM acepta GROUP BY unico)a ON c.unico = a.unico \
		"
		ultimo = pd.read_sql_query(consulta, cnx)

		del ultimo['unico']

		output_dir = "output/"
		os.makedirs(output_dir, exist_ok=True)


		# Obtener la fecha actual
		today = date.today()
		filename = today.strftime(output_dir + "%d-%b-%Y") + " - Plazo de la Deuda.xlsx"

		# Crear un ExcelWriter con xlsxwriter como motor
		writer = pd.ExcelWriter(filename, engine='xlsxwriter')

		# Escribir los DataFrames en las hojas correspondientes
		# contable.to_excel(writer, sheet_name='contable', index=False)
		# contable_limpio.to_excel(writer, sheet_name='contable_limpio', index=False)
		ultimo.to_excel(writer, sheet_name='Deuda', index=False)

		# Obtener el libro y la hoja de trabajo
		workbook = writer.book
		worksheet = writer.sheets['Deuda']

		# Congelar la primera fila (encabezados)
		worksheet.freeze_panes(1, 0)  # Congela la fila 1 (encabezados) y ninguna columna

		# Crear un formato con color de fondo verde suave
		green_format = workbook.add_format({'bg_color': '#C6EFCE'})  # C√≥digo HEX para verde suave

		# Determinar la √∫ltima fila con datos en la columna H
		# La columna H corresponde al √≠ndice 7 (0-based)
		last_row = len(ultimo)  # N√∫mero de filas en el DataFrame
		start_row = 1  # Fila 2 en Excel (0-based ser√≠a 1)

		# Aplicar el formato a la columna H desde la fila 2 hasta la √∫ltima fila
		worksheet.set_column(6, 6, None, green_format)  # Aplicar formato a toda la columna H
		for row in range(start_row, last_row + 1):  # Iterar desde la fila 2 hasta la √∫ltima fila
			worksheet.write(row, 6, ultimo.iloc[row - 1, 6], green_format)  # Aplicar formato a cada celda

		# Ajustar el ancho de las columnas al contenido
		for i, col in enumerate(ultimo.columns):
			# Encontrar la longitud m√°xima del contenido en la columna
			max_len = max(ultimo[col].astype(str).map(len).max(), len(col))
			# Ajustar el ancho de la columna
			worksheet.set_column(i, i, max_len)

		# Guardar y cerrar el archivo
		writer.close()
		print("‚úÖ FIN")

if __name__ == '__main__':
	PlazoDeLaDeuda()
